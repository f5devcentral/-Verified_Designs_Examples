name: Deploy Nginx App Protect in AWS
on:
  #push: {branches: main}
  workflow_dispatch:
    inputs:
      msg: 
        description: 'Deploying NAP though AWS'
        default: 'v1.0.0'  
jobs:
  Deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - name: Install dependencies
        run: |
          python -m pip install boto3
          python -m pip install paramiko
      - name: Configure AWS Credentials 
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: ${{secrets.AWS_DEFAULT_REGION}}
      - name: shell command execution 
        run: |
          #export PYTHONPATH="$PYTHONPATH:/root/actions-runner/sdc-runner/apisecurity/apisecurity/lib"
          export PYTHONPATH="$PYTHONPATH:${GITHUB_WORKSPACE}/nginx/nap-deployment-aws-cloud/lib" 
          cp nginx/nap-deployment-aws-cloud/data/testbed-data.json nginx/nap-deployment-aws-cloud/terraform/terraform.tfvars.json
          #cp tests/declarative-advanced-waf-policy/terraform/automation-key* tests/nap-deployment-aws-cloud/terraform/
          cd nginx/nap-deployment-aws-cloud/
          python clean_env.py 
          cd terraform
          terraform init
          terraform plan -out "planfile"           
          terraform apply -input=false "planfile" 
          python3 install_app.py        
      - name: Upload output files
        uses: actions/upload-artifact@v3
        with:
          name: tfstate
          path: nginx/nap-deployment-aws-cloud/terraform/alb_dns
  Testing:
    needs: Deploy
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - name: Install dependencies
        run: |
          python -m pip install boto3
          python -m pip install paramiko
      
      - name: Download the Artifacts
        uses: actions/download-artifact@v3
        with:
          name: tfstate
      
      - name: shell command execution 
        run: |
          #export PYTHONPATH="$PYTHONPATH:/root/actions-runner/sdc-runner/apisecurity/apisecurity/lib"          
          export PYTHONPATH="$PYTHONPATH:${GITHUB_WORKSPACE}/nginx/nap-deployment-aws-cloud/lib"          
          cp alb_dns nginx/nap-deployment-aws-cloud/terraform/
          cd nginx/nap-deployment-aws-cloud/
          pytest --html=nap_deployment_cloud_report.html
      
      - name: Upload test report
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
         name: test_report
         path: nginx/nap-deployment-aws-cloud/nap_deployment_cloud_report.html
         
  Destroy:
      needs: [Deploy, Testing]
      if: ${{ always() }}
      runs-on: self-hosted
      steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - name: Install dependencies
        run: |
          python -m pip install boto3
          python -m pip install paramiko
      - name: Configure AWS Credentials 
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: ${{secrets.AWS_DEFAULT_REGION}}
      - name: Destroy the infra 
        run: |
          export PYTHONPATH="$PYTHONPATH:${GITHUB_WORKSPACE}/nginx/nap-deployment-aws-cloud/lib"
          cp nginx/nap-deployment-aws-cloud/data/testbed-data.json nginx/nap-deployment-aws-cloud/terraform/terraform.tfvars.json
          #cp data/testbed-data.json tests/nap-deployment-aws-cloud/terraform/terraform.tfvars.json
          #cp tests/declarative-advanced-waf-policy/terraform/automation-key* tests/nap-deployment-aws-cloud/terraform/
          cd nginx/nap-deployment-aws-cloud/terraform/
          terraform init
          terraform plan -destroy 
          terraform destroy -auto-approve
