---
- name: Push updates to all Next instances
  hosts: localhost
  gather_facts: no
  vars_files:
    - "../next_vars.yml"  # Path to the external variables file

  tasks:
    - name: Login to CM and retrieve the access token
      uri:
        url: "https://{{ central_manager.address }}/api/login"
        method: POST
        body_format: json
        body:
          username: "{{ central_manager.user }}"
          password: "{{ central_manager.password }}"
        headers:
          Content-Type: "application/json"
        validate_certs: no
      register: login_response
      failed_when: login_response.status != 200

    - name: Extract access token
      set_fact:
        access_token: "{{ login_response.json.access_token }}"

    - name: Initialize file names list
      set_fact:
        file_names: []

    - name: Get file information for attack signatures, bot signatures ans threat campaigns
      uri:
        url: "https://{{ central_manager.address }}{{ item }}"
        method: GET
        headers:
          Authorization: "Bearer {{ access_token }}"
        validate_certs: no
      register: response
      with_items:
        - "/api/waf/v1/live-update/attack-signatures"
        - "/api/waf/v1/live-update/bot-signatures"
        - "/api/waf/v1/live-update/threat-campaigns"

    - name: Filter files with missing last_installed field and status equal to 'inactive'
      set_fact:
        file_names: "{{ file_names + [item.file_name] }}"
      loop: >-
        {{
          response.results
          | selectattr('status', 'equalto', 200)
          | map(attribute='json._embedded.files')
          | flatten
          | selectattr('status', 'equalto', 'inactive')
          | rejectattr('last_installed', 'defined')
          | list
        }}
      vars:
        item: "{{ item }}"

    - name: Files to install
      debug:
        msg: "{{ file_names }}"

    - name: Push all updates
      uri:
        url: "https://{{ central_manager.address }}/api/waf/v1/tasks/live-update/install-bulk"
        method: POST
        body_format: json
        body:
          files: "{{ file_names }}"
        headers:
          Authorization: "Bearer {{ access_token }}"
          Content-Type: "application/json"
        validate_certs: no
      register: post_response
      failed_when: post_response.status not in [200, 201]

    - name: Extract polling URL from the POST response
      set_fact:
        task_url: "{{ post_response.json._links.self.href }}"

    - name: Wait for push task completion. Please wait, task completion might take up to 15 minutes
      cm_polling_module:
        cm_url: "{{ central_manager.address }}"
        username: "{{ central_manager.user }}"
        password: "{{ central_manager.password }}"
        task_url: "{{ task_url }}"
      register: polling_result

    - name: Live updates push result
      debug:
        var: polling_result
