---
- name: Request CBIP Masterkey
  hosts: cbip
  gather_facts: false

  vars_files:
    - cbip_vars.yml
    - next_vars.yml

  tasks:
    - name: Get CBIP Masterkey
      raw: f5mku -K
      register: f5kmu_output

    - name: Save Masterkey
      set_fact:
        master_key: "{{  f5kmu_output.stdout  }}"

    - name: Login to the API
      delegate_to: localhost
      uri:
        url: "https://{{  next.address  }}/api/login"
        method: POST
        body: '{"username": "{{  next.user  }}", "password": "{{  next.password  }}"}'
        body_format: json
        headers:
          Content-Type: "application/json"
        validate_certs: no
      register: login_response

    - name: Save access_token
      set_fact:
        access_token: "{{ login_response.json.access_token }}"

    - name: Create New Migration
      delegate_to: localhost
      uri:
        url: "https://{{ next.address }}/api/v1/migrations"
        method: POST
        body: '{"name": "auto-migration-{{  inventory_hostname | replace(".", "-") }}-{{ 99999999 | random | to_uuid }}", "description": "Ansible Job Migration {{ "" | get_date_time }}"}'
        body_format: json
        headers:
          Content-Type: "application/json"
          Authorization: "Bearer {{  access_token  }}"
        validate_certs: no
        status_code: 201
      register: next_migration

    - name: Upload UCS
      delegate_to: localhost
      shell: >
        curl -X POST
        -F "ucs_file=@/tmp/{{  cbip_ucs_name  }}_{{  inventory_hostname  }}.ucs"
        -F "master_key={{ master_key }}"
        -F "grouping_type=ip"
        --insecure
        -H "Authorization: Bearer {{ access_token }}"
        "https://{{ next.address }}/api/v1/migrations/{{ next_migration.json.id }}/upload?async=false"
      register: result

    - name: Analyze application eligibility for migration
      delegate_to: localhost
      uri:
        url: "https://{{ next.address }}/api/v1/migrations/{{ next_migration.json.id }}/applications?limit={{ next.max_applications }}"
        method: GET
        headers:
          Authorization: "Bearer {{  access_token  }}"
        validate_certs: no
      register: next_apps

    - name: Get migratable green apps
      set_fact:
        migrate_apps: "{{ next_apps.json | json_query(query) | reject('equalto', []) | flatten(1) }} "
      vars:
        query: "_embedded.applications[?virtual_servers[?status=='green' && length(irules) == `0` && length(certificates) == `0`]]"

    - name: Extract not installed WAFs
      set_fact:
        app_waf_names: "{{ migrate_apps |  waf_app_names(migrate_waf_policy_prefix) }}"

    - name: Get Installed WAFs
      delegate_to: localhost
      uri:
        url: "https://{{ next.address }}/api/waf/v1/policies"
        method: GET
        headers:
          Authorization: "Bearer {{ access_token }}"
        validate_certs: no
      register: next_wafs_available

    - name: Any Next WAFs Available
      set_fact:
        next_waf_total: "{{ next_wafs_available | json_query(query) | int }}"
      vars:
        query: "json.total"

    - name: Set installed_waf_names to empty if next_waf_total is 0
      set_fact:
        installed_waf_names: []
      when: next_waf_total | int == 0

    - name: Filter installed WAF names
      set_fact:
        installed_waf_names: "{{ next_wafs_available | json_query(query) | list }}"
      vars:
        query: "json._embedded.policies[].name"
      when: next_waf_total | int != 0

    - name: Get Apps with missing WAFs
      set_fact:
        import_dependecies_apps: "{{ app_waf_names | get_apps_to_import_dependencies(installed_waf_names) }}"

    - name: Prepare apps to install dependencies
      delegate_to: localhost
      uri:
        url: "https://{{ next.address }}/api/v1/migrations/{{ next_migration.json.id  }}/applications/bulk-stage"
        body:
          applications: "{{ import_dependecies_apps }}"
        body_format: json
        method: PUT
        headers:
          Content-Type: "application/json"
          Authorization: "Bearer {{ access_token }}"
        validate_certs: no
      register: result

    - name: Install dependencies if necessary
      delegate_to: localhost
      uri:
        url: "https://{{ next.address }}/api/v1/migrations/{{ next_migration.json.id  }}/applications/install-dependencies"
        body: '{"applications": [{{ item }}]}'
        body_format: json
        method: POST
        headers:
          Content-Type: "application/json"
          Authorization: "Bearer {{ access_token }}"
        validate_certs: no
        status_code: 200
      with_items: "{{ import_dependecies_apps }}"
      register: result

    - name: Get applications AS3 preview
      set_fact:
        preview_links: "{{ migrate_apps | map(attribute='as3_preview') | list }}"

    - name: Download each AS3 preview file
      delegate_to: localhost
      uri:
        url: "https://{{ next.address }}{{ item }}"
        method: GET
        return_content: yes
        headers:
          Authorization: "Bearer {{  access_token  }}"
          Content-Type: "application/json"
        validate_certs: false
      register: as3_app_preview_files
      with_items: "{{ preview_links }}"
      loop_control:
        label: "{{ item }}"

    - name: Create AS3 applications
      delegate_to: localhost
      uri:
        url: "https://{{  next.address  }}/api/v1/spaces/default/appsvcs/declare"
        method: POST
        body: "{{ item | append_waf_if_required(next_apps, migrate_waf_policy_prefix) }}"
        body_format: json
        headers:
          Authorization: "Bearer {{  access_token  }}"
          Content-Type: "application/json"
        validate_certs: false
        status_code: 200
      with_items: "{{ as3_app_preview_files.results }}"
